service 'Customer Core API'{
    path "/customers/{customerId}"{
        method "put" | Update the profile of the customer with the given customer id {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'CustomerProfileUpdateRequestDto' | the customer's profile information : {
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					}  
				'CustomerResponseDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/customers/{customerId}/address"{
        method "put" | Change a customer's address. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'AddressDto' | the customer's new address : {
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					}  
            }
        }
    }
    path "/customers"{
        method "get" | Get all customers in pages of 10 entries per page. {
            parameters{
				'filter' | search terms to filter the customers by name : string
				'limit' | the maximum number of customers per page : integer
				'offset' | the offset of the page's first customer : integer
				'fields' | a comma-separated list of the fields that should be included in the response : string
				'PaginatedCustomerResponseDto'  : {
					'filter' : string
					'limit' : integer
					'offset' : integer
					'size' : integer
					'customers' : {
						'customerId' : string
						'firstname' : string
						'lastname' : string
						'birthday' : string
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						'email' : string
						'phoneNumber' : string
						'moveHistory' : {
							'streetAddress' : string
							'postalCode' : string
							'city' : string
							}[]
						'links' : {
							'rel' : string
							'href' : string
							'hreflang' : string
							'media' : string
							'title' : string
							'type' : string
							'deprecation' : string
							'profile' : string
							'name' : string
							}[]
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
        method "post" | Create a new customer. {
            parameters{
				'CustomerProfileUpdateRequestDto' | the customer's profile information : {
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					}  
				'CustomerResponseDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/customers/{ids}"{
        method "get" | Get a specific set of customers. {
            parameters{
				'ids' | a comma-separated list of customer ids : string
				'fields' | a comma-separated list of the fields that should be included in the response : string
				'CustomersResponseDto'  : {
					'customers' : {
						'customerId' : string
						'firstname' : string
						'lastname' : string
						'birthday' : string
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						'email' : string
						'phoneNumber' : string
						'moveHistory' : {
							'streetAddress' : string
							'postalCode' : string
							'city' : string
							}[]
						'links' : {
							'rel' : string
							'href' : string
							'hreflang' : string
							'media' : string
							'title' : string
							'type' : string
							'deprecation' : string
							'profile' : string
							'name' : string
							}[]
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/cities/{postalCode}"{
        method "get" | Get the cities for a particular postal code. {
            parameters{
				'postalCode' | the postal code : string
				'CitiesResponseDto'  : {
					'cities' : array
					}  
            }
        }
    }
    path "/error"{
        method "get" | undefined {
            parameters{
				'handleError_4_response_200'  : object
            }
        }
        method "put" | undefined {
            parameters{
				'handleError_5_response_200'  : object
            }
        }
        method "post" | undefined {
            parameters{
				'handleError_6_response_200'  : object
            }
        }
        method "delete" | undefined {
            parameters{
				'handleError_1_response_200'  : object
            }
        }
        method "options" | undefined {
            parameters{
				'handleError_2_response_200'  : object
            }
        }
        method "head" | undefined {
            parameters{
				'handleError_3_response_200'  : object
            }
        }
        method "patch" | undefined {
            parameters{
				'handleError_response_200'  : object
            }
        }
    }
}
service 'Customer Management API'{
    path "/customers/{customerId}"{
        method "get" | Get customer with a given customer id. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'CustomerDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
        method "put" | Update the profile of the customer with the given customer id {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'CustomerProfileDto' | the customer's updated profile : {
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					}  
				'CustomerDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/interaction-logs/{customerId}"{
        method "get" | Get the interaction log for a customer with a given customer id. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'InteractionLogAggregateRoot'  : {
					'customerId' : string
					'username' : string
					'lastAcknowledgedInteractionId' : string
					'interactions' : {
						'id' : string
						'date' : string
						'content' : string
						'sentByOperator' : boolean
						}[]
					'numberOfUnacknowledgedInteractions' : integer
					}  
            }
        }
        method "patch" | Acknowledge all of a given customer's interactions up to the given interaction id. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'InteractionAcknowledgementDto' | the id of the newest acknowledged interaction : {
					'lastAcknowledgedInteractionId' : string
					}  
				'InteractionLogAggregateRoot'  : {
					'customerId' : string
					'username' : string
					'lastAcknowledgedInteractionId' : string
					'interactions' : {
						'id' : string
						'date' : string
						'content' : string
						'sentByOperator' : boolean
						}[]
					'numberOfUnacknowledgedInteractions' : integer
					}  
            }
        }
    }
    path "/notifications"{
        method "get" | Get a list of all unacknowledged notifications. {
            parameters{
				'NotificationDto'  : {
					'customerId' : string
					'username' : string
					'count' : integer
					}[]  
            }
        }
    }
    path "/customers"{
        method "get" | Get all customers. {
            parameters{
				'filter' | search terms to filter the customers by name : string
				'limit' | the maximum number of customers per page : integer
				'offset' | the offset of the page's first customer : integer
				'PaginatedCustomerResponseDto'  : {
					'filter' : string
					'limit' : integer
					'offset' : integer
					'size' : integer
					'customers' : {
						'customerId' : string
						'firstname' : string
						'lastname' : string
						'birthday' : string
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						'email' : string
						'phoneNumber' : string
						'moveHistory' : {
							'streetAddress' : string
							'postalCode' : string
							'city' : string
							}[]
						'links' : {
							'rel' : string
							'href' : string
							'hreflang' : string
							'media' : string
							'title' : string
							'type' : string
							'deprecation' : string
							'profile' : string
							'name' : string
							}[]
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/error"{
        method "get" | undefined {
            parameters{
				'handleError_3_response_200'  : object
            }
        }
        method "put" | undefined {
            parameters{
				'handleError_5_response_200'  : object
            }
        }
        method "post" | undefined {
            parameters{
				'handleError_4_response_200'  : object
            }
        }
        method "delete" | undefined {
            parameters{
				'handleError_1_response_200'  : object
            }
        }
        method "options" | undefined {
            parameters{
				'handleError_response_200'  : object
            }
        }
        method "head" | undefined {
            parameters{
				'handleError_6_response_200'  : object
            }
        }
        method "patch" | undefined {
            parameters{
				'handleError_2_response_200'  : object
            }
        }
    }
}
service 'Customer Self-Service API'{
    path "/customers/{customerId}/address"{
        method "put" | Change a customer's address. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'AddressDto' | the customer's new address : {
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					}  
            }
        }
    }
    path "/insurance-quote-requests"{
        method "get" | Get all Insurance Quote Requests. {
            parameters{
				'InsuranceQuoteRequestDto' | the insurance quote request : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}[]  
            }
        }
        method "post" | Create a new Insurance Quote Request. {
            parameters{
				'InsuranceQuoteRequestDto' | the insurance quote request : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}  
            }
        }
    }
    path "/customers"{
        method "post" | Complete the registration of a new customer. {
            parameters{
				'CustomerRegistrationRequestDto' | the customer's profile information : {
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'city' : string
					'streetAddress' : string
					'postalCode' : string
					'phoneNumber' : string
					}  
				'CustomerDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/auth"{
        method "post" | Authenticate a user based on a given email address and password. {
            parameters{
				'AuthenticationRequestDto' | the email and password used to authenticate the user : {
					'email' : string
					'password' : string
					}  
				'AuthenticationResponseDto'  : {
					'email' : string
					'token' : string
					}  
            }
        }
    }
    path "/auth/signup"{
        method "post" | Create a new user. {
            parameters{
				'SignupRequestDto' | the email and password used to create a new user : {
					'email' : string
					'password' : string
					}  
				'UserResponseDto'  : {
					'email' : string
					'customerId' : string
					}  
            }
        }
    }
    path "/insurance-quote-requests/{id}"{
        method "patch" | Updates the status of an existing Insurance Quote Request {
            parameters{
				'id' | the insurance quote request's unique id : integer
				'InsuranceQuoteResponseDto' | the response that contains the customer's decision whether to accept or reject an insurance quote : {
					'status' : string
					'expirationDate' : string
					'insurancePremium' : undefined
					'policyLimit' : undefined
					}  
				'InsuranceQuoteRequestDto' | the insurance quote request : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}  
            }
        }
    }
    path "/user"{
        method "get" | Get the user details for the currently logged-in user. {
            parameters{
				'UserResponseDto'  : {
					'email' : string
					'customerId' : string
					}  
            }
        }
    }
    path "/insurance-quote-requests/{insuranceQuoteRequestId}"{
        method "get" | Get a specific Insurance Quote Request. {
            parameters{
				'insuranceQuoteRequestId' | the insurance quote request's unique id : integer
				'InsuranceQuoteRequestDto' | the insurance quote request : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}  
            }
        }
    }
    path "/customers/{customerId}"{
        method "get" | Get customer with a given customer id. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'CustomerDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/customers/{customerId}/insurance-quote-requests"{
        method "get" | Get a customer's insurance quote requests. {
            parameters{
				'customerId' | the customer's unique id : {
					'id' : string
					}  
				'InsuranceQuoteRequestDto' | the insurance quote request : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}[]  
            }
        }
    }
    path "/cities/{postalCode}"{
        method "get" | Get the cities for a particular postal code. {
            parameters{
				'postalCode' | the postal code : string
				'CitiesResponseDto'  : {
					'cities' : array
					}  
            }
        }
    }
    path "/error"{
        method "get" | undefined {
            parameters{
				'handleError_5_response_200'  : object
            }
        }
        method "put" | undefined {
            parameters{
				'handleError_3_response_200'  : object
            }
        }
        method "post" | undefined {
            parameters{
				'handleError_6_response_200'  : object
            }
        }
        method "delete" | undefined {
            parameters{
				'handleError_4_response_200'  : object
            }
        }
        method "options" | undefined {
            parameters{
				'handleError_response_200'  : object
            }
        }
        method "head" | undefined {
            parameters{
				'handleError_1_response_200'  : object
            }
        }
        method "patch" | undefined {
            parameters{
				'handleError_2_response_200'  : object
            }
        }
    }
}
service 'PolicyManagement API'{
    path "/policies/{policyId}"{
        method "get" | Get a single policy. {
            parameters{
				'policyId' | the policy's unique id : {
					'id' : string
					}  
				'expand' | a comma-separated list of the fields that should be expanded in the response : string
				'PolicyDto'  : {
					'policyId' : string
					'customer' : object
					'creationDate' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					'_expandable' : array
					}  
            }
        }
        method "put" | Update an existing policy. {
            parameters{
				'policyId' | the policy's unique id : {
					'id' : string
					}  
				'CreatePolicyRequestDto' | the policy that is to be added : {
					'customerId' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					}  
				'PolicyDto'  : {
					'policyId' : string
					'customer' : object
					'creationDate' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					'_expandable' : array
					}  
            }
        }
        method "delete" | Delete an existing policy. {
            parameters{
				'policyId' | the policy's unique id : {
					'id' : string
					}  
            }
        }
    }
    path "/riskfactor/compute"{
        method "post" | Computes the risk factor for a given customer. {
            parameters{
				'RiskFactorRequestDto' | the request containing relevant customer attributes (e.g., postal code, birthday) : {
					'birthday' : string
					'postalCode' : string
					}  
				'RiskFactorResponseDto'  : {
					'riskFactor' : integer
					}  
            }
        }
    }
    path "/policies"{
        method "get" | Get all policies, newest first. {
            parameters{
				'limit' | the maximum number of policies per page : integer
				'offset' | the offset of the page's first policy : integer
				'expand' | a comma-separated list of the fields that should be expanded in the response : string
				'PaginatedPolicyResponseDto'  : {
					'limit' : integer
					'offset' : integer
					'size' : integer
					'policies' : {
						'policyId' : string
						'customer' : object
						'creationDate' : string
						'policyPeriod' : undefined
						'policyType' : string
						'deductible' : undefined
						'policyLimit' : undefined
						'insurancePremium' : undefined
						'insuringAgreement' : undefined
						'links' : {
							'rel' : string
							'href' : string
							'hreflang' : string
							'media' : string
							'title' : string
							'type' : string
							'deprecation' : string
							'profile' : string
							'name' : string
							}[]
						'_expandable' : array
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
        method "post" | Create a new policy. {
            parameters{
				'CreatePolicyRequestDto' | the policy that is to be added : {
					'customerId' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					}  
				'PolicyDto'  : {
					'policyId' : string
					'customer' : object
					'creationDate' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					'_expandable' : array
					}  
            }
        }
    }
    path "/insurance-quote-requests/{id}"{
        method "get" | Get a specific Insurance Quote Request. {
            parameters{
				'id' | the insurance quote request's unique id : integer
				'InsuranceQuoteRequestDto'  : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}  
            }
        }
        method "patch" | Updates the status of an existing Insurance Quote Request {
            parameters{
				'id' | the insurance quote request's unique id : integer
				'InsuranceQuoteResponseDto' | the response that contains a new insurance quote if the request has been accepted : {
					'status' : string
					'expirationDate' : string
					'insurancePremium' : undefined
					'policyLimit' : undefined
					}  
				'InsuranceQuoteRequestDto'  : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}  
            }
        }
    }
    path "/insurance-quote-requests"{
        method "get" | Get all Insurance Quote Requests. {
            parameters{
				'InsuranceQuoteRequestDto'  : {
					'id' : integer
					'date' : string
					'statusHistory' : {
						'date' : string
						'status' : string
						}[]
					'customerInfo' : undefined
					'insuranceOptions' : undefined
					'insuranceQuote' : undefined
					'policyId' : string
					}[]  
            }
        }
    }
    path "/customers"{
        method "get" | Get all customers. {
            parameters{
				'filter' | search terms to filter the customers by name : string
				'limit' | the maximum number of customers per page : integer
				'offset' | the offset of the page's first customer : integer
				'PaginatedCustomerResponseDto'  : {
					'filter' : string
					'limit' : integer
					'offset' : integer
					'size' : integer
					'customers' : {
						'customerId' : string
						'firstname' : string
						'lastname' : string
						'birthday' : string
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						'email' : string
						'phoneNumber' : string
						'moveHistory' : {
							'streetAddress' : string
							'postalCode' : string
							'city' : string
							}[]
						'links' : {
							'rel' : string
							'href' : string
							'hreflang' : string
							'media' : string
							'title' : string
							'type' : string
							'deprecation' : string
							'profile' : string
							'name' : string
							}[]
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/customers/{customerIdDto}"{
        method "get" | Get customer with a given customer id. {
            parameters{
				'customerIdDto' | the customer's unique id : {
					'id' : string
					}  
				'CustomerDto'  : {
					'customerId' : string
					'firstname' : string
					'lastname' : string
					'birthday' : string
					'streetAddress' : string
					'postalCode' : string
					'city' : string
					'email' : string
					'phoneNumber' : string
					'moveHistory' : {
						'streetAddress' : string
						'postalCode' : string
						'city' : string
						}[]
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					}  
            }
        }
    }
    path "/customers/{customerIdDto}/policies"{
        method "get" | Get a customer's policies. {
            parameters{
				'customerIdDto' | the customer's unique id : {
					'id' : string
					}  
				'expand' | a comma-separated list of the fields that should be expanded in the response : string
				'PolicyDto'  : {
					'policyId' : string
					'customer' : object
					'creationDate' : string
					'policyPeriod' : undefined
					'policyType' : string
					'deductible' : undefined
					'policyLimit' : undefined
					'insurancePremium' : undefined
					'insuringAgreement' : undefined
					'links' : {
						'rel' : string
						'href' : string
						'hreflang' : string
						'media' : string
						'title' : string
						'type' : string
						'deprecation' : string
						'profile' : string
						'name' : string
						}[]
					'_expandable' : array
					}[]  
            }
        }
    }
    path "/error"{
        method "get" | undefined {
            parameters{
				'handleError_2_response_200'  : object
            }
        }
        method "put" | undefined {
            parameters{
				'handleError_4_response_200'  : object
            }
        }
        method "post" | undefined {
            parameters{
				'handleError_3_response_200'  : object
            }
        }
        method "delete" | undefined {
            parameters{
				'handleError_response_200'  : object
            }
        }
        method "options" | undefined {
            parameters{
				'handleError_6_response_200'  : object
            }
        }
        method "head" | undefined {
            parameters{
				'handleError_1_response_200'  : object
            }
        }
        method "patch" | undefined {
            parameters{
				'handleError_5_response_200'  : object
            }
        }
    }
}
